import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = "YOUR_BOT_TOKEN"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è social credit
social_credit_db = {}

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
ALLOWED_USER = "@Zhdanov_Albert"

def is_user_allowed(user: types.User):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
    return user.username == ALLOWED_USER.lstrip('@') or f"@{user.username}" == ALLOWED_USER

async def get_target_user(message: Message, args: str) -> types.User | None:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ reply –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º"""
    # –ï—Å–ª–∏ –µ—Å—Ç—å reply - –±–µ—Ä–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.reply_to_message:
        return message.reply_to_message.from_user
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω username –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
    if args and args.startswith('@'):
        username = args.lstrip('@').split()[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ @
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API Telegram
        return types.User(
            id=hash(username),
            first_name=username,
            username=username,
            is_bot=False,
            language_code='ru'
        )
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    return message.from_user

async def parse_command_args(message: Message) -> tuple[types.User | None, int]:
    """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
    command_text = message.text.split(maxsplit=1)
    args = command_text[1] if len(command_text) > 1 else ""
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
    amount = 1
    if args and args.split()[0].isdigit():
        amount = int(args.split()[0])
        args = " ".join(args.split()[1:])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user = await get_target_user(message, args)
    
    return target_user, amount

# ========== –ö–û–ú–ê–ù–î–´ ========== #

@dp.message(Command("–ø—Ä–∏–±–∞–≤–∏—Ç—å_social_credit"))
async def add_social_credit(message: Message):
    if not is_user_allowed(message.from_user):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
        return

    target_user, amount = await parse_command_args(message)
    
    if target_user is None:
        await message.answer(
            "‚Ñπ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            "1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "2. –£–∫–∞–∂–∏—Ç–µ @username –ø–æ—Å–ª–µ —Å—É–º–º—ã\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/–ø—Ä–∏–±–∞–≤–∏—Ç—å_social_credit 5 @username</code>"
        )
        return

    user_id = target_user.id
    social_credit_db[user_id] = social_credit_db.get(user_id, 0) + amount
    
    await message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {hbold(target_user.full_name)} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤!\n"
        f"üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {social_credit_db[user_id]}"
    )

@dp.message(Command("—É–±–∞–≤–∏—Ç—å_social_credit"))
async def remove_social_credit(message: Message):
    if not is_user_allowed(message.from_user):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
        return

    target_user, amount = await parse_command_args(message)
    
    if target_user is None:
        await message.answer(
            "‚Ñπ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            "1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "2. –£–∫–∞–∂–∏—Ç–µ @username –ø–æ—Å–ª–µ —Å—É–º–º—ã\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/—É–±–∞–≤–∏—Ç—å_social_credit 3 @username</code>"
        )
        return

    user_id = target_user.id
    social_credit_db[user_id] = social_credit_db.get(user_id, 0) - amount
    
    await message.answer(
        f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {hbold(target_user.full_name)} —É–±–∞–≤–ª–µ–Ω–æ {amount} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤!\n"
        f"üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {social_credit_db[user_id]}"
    )

@dp.message(Command("getsocialcredit"))
async def check_social_credit(message: Message):
    command_text = message.text.split(maxsplit=1)
    args = command_text[1] if len(command_text) > 1 else ""
    
    target_user = await get_target_user(message, args)
    
    if target_user is None:
        target_user = message.from_user
    
    credit = social_credit_db.get(target_user.id, 0)
    await message.answer(
        f"üìä –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {hbold(target_user.full_name)}:\n"
        f"‚≠ê {credit} –æ—á–∫–æ–≤"
    )

@dp.message(Command("–∏–∑–≥–Ω–∞—Ç—å"))
async def ban_user(message: Message):
    if not is_user_allowed(message.from_user):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
        return

    command_text = message.text.split(maxsplit=1)
    args = command_text[1] if len(command_text) > 1 else ""
    
    target_user = await get_target_user(message, args)
    
    if target_user is None:
        await message.answer(
            "‚Ñπ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            "1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "2. –£–∫–∞–∂–∏—Ç–µ @username\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/–∏–∑–≥–Ω–∞—Ç—å @username</code>"
        )
        return

    try:
        await bot.ban_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id
        )
        await message.answer(f"‚ò† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {hbold(target_user.full_name)} –±—ã–ª –∏–∑–≥–Ω–∞–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≥–Ω–∞–Ω–∏–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")

# ========== –ó–ê–ü–£–°–ö ========== #

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
